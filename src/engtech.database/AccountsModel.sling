import jk.sql
import jk.mysql
import jk.time

class:

const TABLENAME = "accounts"

model TableModel static
{
    accountId as int
    username as string
    password as string
    userRole as string
    createdAt as long
    updatedAt as long
}

func createTable as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(TABLENAME)

    tbl.addIntegerKeyColumn("accountId")
    tbl.addStringColumn("username")
    tbl.addStringColumn("password")
    tbl.addStringColumn("userRole")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")
    tbl.addUniqueIndex("username")
    return tbl
}

func login(db as MySQLDatabase, loginConstraints as DynamicMap) as DynamicMap
{
    var v = new vector<TableModel>
    var it = assert db.querySync(db.prepareSelectStatementSync(TABLENAME, loginConstraints)):
        return null
    while it{
        var o = it.next()
        if not o:
            break
        var row = TableModel.forJsonObject(o)
        if not row:
            continue
        v += row
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func createAccount(db as MySQLDatabase,  dataModel as TableModel) as TableModel
{
    assert dataModel
    dataModel.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(TABLENAME, dataModel.toDynamicMap()))
    return dataModel
}
func getAllAccounts(db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModel>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(TABLENAME)):
        return null
    while it{
        var o = it.next()
        if not o:
            break
        var row = TableModel.forJsonObject(o)
        if not row:
            continue
        v += row
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func editAccount(db as MySQLDatabase, acId as string, data as TableModel) as bool
{
    assert data
    data.setUpdatedAtValue(SystemClock.asUTCSeconds())
    var criteria = new TableModel()
    criteria.setAccountIdValue(String.toInteger(acId))
    return db.executeSync(db.prepareUpdateStatementSync(TABLENAME,criteria.toDynamicMap(),data.toDynamicMap()))
}

func deleteAccount(db as MySQLDatabase, acId as string) as bool
{
    var criteria = new TableModel()
    criteria.setAccountIdValue(String.toInteger(acId))
    return db.executeSync(db.prepareDeleteStatementSync(TABLENAME, criteria.toDynamicMap()))
}
