import jk.log
import jk.sqlite
import jk.mysql
import jk.sql
import jk.env
import jk.time

class:

pvar db as MySQLDatabase


func forContext(ctx as LoggingContext) static as this
{
    var cstr = EnvironmentVariable.get("SMS_DATABASE")
    // FOR Faster DEV Testing
    // cstr = "localhost:engtech:Engtech@123:sms_db:ssl:utf8"
    //
    Log.debug(ctx, "Opening database connection: '" .. cstr .. "'")
    var db2 = MySQLDatabase.forConnectionStringSync(ctx, cstr)
    if not db2:
        Error.throw("failedToConnectToDatabase", cstr)
    var v = new this()
    v.setDb(db2)
    return v
}

func updateTable(table as SQLTableInfo)
{
    if not table:
        Error.throw("nullTable","updateTable")
    if not db:
        Error.throw("nullDb", "updateTable")
    if not db.ensureTableExistsSync(table):
        Error.throw("failedToUpdateTable", table.getName())
}

func updateTables as SQLTableInfo
{   
    // General Model
    updateTable(AccountsModel.createTable())
    // End General Model
    
    // Assessment Model
    updateTable(ParticularsModel.createTable())
    // End Assessment Model

    // Cashier Model
    updateTable(PaymentsModel.createTable())
    // End Cashier Model
    
    // HRMS Model
    updateTable(EmployeeModel.createTable())
    updateTable(EmploymentModel.createTable())
    updateTable(EmployeeLogsModel.createTable())
    // End HRMS Model

    //  Curriculum Model
    updateTable(SubjectModel.createTable())
    updateTable(SubjectScheduleModel.createTable())
    //  End Curriculum Model
}

func close
{
    if db:
        db.closeSync()
    db = null
}
