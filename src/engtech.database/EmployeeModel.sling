import jk.log
import jk.sqlite
import jk.mysql
import jk.sql
import jk.env
import jk.time

class is DatabaseDriver:

const TABLE_NAME = "employee"

model TableModel static
{
    empId as string
    empFname as string
    empMname as string
    empLname as string
    empSuffix as string
    empAge as string
    empBirthday as string
    empGender as string
    empStatus as string
    empMobile as string
    createdAt as long
    updatedAt as long
}

func createTable as SQLTableInfo
{
    var employee = SQLTableInfo.forName(TABLE_NAME)
    employee.addStringKeyColumn("empId")
    employee.addStringColumn("empFname")
    employee.addStringColumn("empMname")
    employee.addStringColumn("empLname")
    employee.addStringColumn("empSuffix")
    employee.addStringColumn("empAge")
    employee.addStringColumn("empBirthday")
    employee.addStringColumn("empGender")
    employee.addStringColumn("empStatus")
    employee.addStringColumn("empMobile")
    employee.addLongColumn("createdAt")
    employee.addLongColumn("updatedAt")
    return (employee)
}

func getEmployees(db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModel>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(TABLE_NAME)):
        return null
    while it{
        var o = it.next()
        if  not o:
            break
        var employee = TableModel.forJsonObject(o)
        if not employee:
            continue
        v += employee
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func addEmployee(db as MySQLDatabase, data as TableModel) as TableModel
{
    assert data
    data.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(TABLE_NAME, data.toDynamicMap()))
    return data
}
