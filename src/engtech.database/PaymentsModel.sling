import jk.sql
import jk.mysql
import jk.time

class is DatabaseDriver:

const TABLENAME = "payments"

model TableModel static
{
    paymentsId as int
    orNumber as string
    studentId as string
    assessmentId as string
    price as string
    paymentAmount as string
    paymentChange as string
    paymentDate as long
    createdAt as long
    updatedAt as long
}

func createTable as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(TABLENAME)

    tbl.addIntegerKeyColumn("paymentsId")
    tbl.addStringColumn("orNumber")
    tbl.addStringColumn("studentId")
    tbl.addStringColumn("assessmentId")
    tbl.addStringColumn("price")
    tbl.addStringColumn("paymentAmount")
    tbl.addStringColumn("paymentChange")
    tbl.addLongColumn("paymentDate")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")
    
    return tbl
}

func getAllPayments(db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModel>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(TABLENAME)):
        return null
    while it{
        var o = it.next()
        if not o:
            break
        var payment = TableModel.forJsonObject(o)
        if not payment:
            continue
        v += payment
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func insertPayment(db as MySQLDatabase, data as TableModel) as TableModel
{
    assert data
    data.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(TABLENAME, data.toDynamicMap()))
    return data
}

func editPayment(db as MySQLDatabase, payId as string, data as TableModel) as bool
{
    assert data
    data.setUpdatedAtValue(SystemClock.asUTCSeconds())
    var criteria = new TableModel()
    criteria.setPaymentsIdValue(String.toInteger(payId))
    return db.executeSync(db.prepareUpdateStatementSync(TABLENAME,criteria.toDynamicMap(),data.toDynamicMap()))
}

func deletePayment(db as MySQLDatabase, payId as string) as bool
{
    var criteria = new TableModel()
    criteria.setPaymentsIdValue(String.toInteger(payId))
    return db.executeSync(db.prepareDeleteStatementSync(TABLENAME, criteria.toDynamicMap()))
}

func getAllPaymentsJoinStudents(db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModel>
    var it = assert db.querySync(db.prepareSync("SELECT * FROM "..TABLENAME.." INNER JOIN "..StudentModel.TABLENAME.." on "..TABLENAME..".studentId = "..StudentModel.TABLENAME..".student_id")):
        return null
    while it{
        var o = it.next()
        if not o:
            break
        var payment = TableModel.forJsonObject(o)
        if not payment:
            continue
        v += payment
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}
